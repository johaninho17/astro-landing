---
import Layout from "../layouts/Layout.astro";
import { sendFormData } from "../lib/firebase";

// Get the server endpoint URL from environment variables
const serverEndpoint = import.meta.env.PUBLIC_SERVER_ENDPOINT;


---

<Layout title="Contact Us - GoEurope Consulting">
    <div>
        <div id="background" class="relative isolate w-full">
            <!-- Image -->
            <img
                src="/images/view-dresden-germany.png"
                alt="View of Dresden, Germany"
                class="w-full h-[300px] sm:h-[400px] object-cover"
            />
            <!-- Text Overlay -->
            <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-40">
                <div class="text-center px-6">
                    <h1
                        class="text-4xl font-bold tracking-tight text-white sm:text-6xl font-nunito-sans"
                    >
                        Contact Us
                    </h1>
                </div>
            </div>
        </div>
    </div>

    <div class="relative isolate mx-4">
        <div class="mx-auto grid max-w-7xl grid-cols-1 lg:grid-cols-2 ">
            <div class="relative px-6 pb-20 pt-16">
                <div class="flex flex-col items-start">
                    <h2
                        class="text-4xl sm:text-5xl tracking-tight font-bold font-nunito-sans"
                    >
                        Have questions?
                    </h2>
                    <h2
                        class="text-4xl sm:text-5xl tracking-tight font-bold font-nunito-sans"
                    >
                        Send us a message
                    </h2>

                    <p class="mt-6 text-lg leading-relaxed text-gray-600 font-nunito">
                        Please fill out the form and we will get back to you as
                        soon as possible. Thank you for your interest.
                    </p>
                    <div class="mt-10 space-y-4">
                        <h2
                            class="text-2xl tracking-tight font-bold font-nunito-sans"
                        >
                            Contact Information
                        </h2>
                        <div class="flex gap-x-4 items-center">
                            <div class="flex h-10 w-10 shrink-0 items-center justify-center rounded-lg" >
                                <img
                                    src="/images/svg/email.svg"
                                    width="24"
                                    height="24"
                                    alt="Email Icon"
                                />
                            </div>
                            <div>
                                <h3
                                    class="text-base font-semibold leading-7 text-black font-nunito-sans"
                                >
                                    Email
                                </h3>
                                <p
                                    class="mt-1 leading-7 text-[#1B4671] font-nunito"
                                >
                                    Team@goeuropeconsulting.com
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    {/* --- FORM --- */}
    <form id="contactForm" class="px-6 pt-16 pb-20 lg:pb-0">
        {/* ... (hidden input, form fields container) ... */}
        <div class="mx-auto max-w-xl lg:mr-0 lg:max-w-lg bg-[#F2F5F7] p-8 rounded-lg shadow-lg">
            {/* ... (grid for inputs: full name, title, email, etc.) ... */}
             <div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
                {/* Full Name */}
                <div>
                    <label for="id_full_name" class="block text-lg font-bold font-nunito leading-6 text-black">Full name<span class="text-xs text-red-500">*</span></label>
                    <div class="mt-2.5">
                        <input type="text" name="full_name" id="id_full_name" maxlength="50" placeholder="John Doe" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-800 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-[#1B4671] sm:text-sm sm:leading-6" required />
                    </div>
                </div>
                {/* Title */}
                <div>
                    <label for="id_title" class="block text-lg font-bold font-nunito leading-6 text-black">Title<span class="text-xs text-red-500">*</span></label>
                    <div class="mt-2.5">
                        <input type="text" name="title" id="id_title" maxlength="50" placeholder="e.g. CEO" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-800 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-[#1B4671] sm:text-sm sm:leading-6" required />
                    </div>
                </div>
                {/* Email */}
                <div class="sm:col-span-2">
                    <label for="id_email" class="block text-lg font-bold font-nunito leading-6 text-black">Email<span class="text-xs text-red-500">*</span></label>
                    <div class="mt-2.5">
                        <input type="email" name="email" id="id_email" maxlength="254" placeholder="e.g. john@email.com" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-800 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-[#1B4671] sm:text-sm sm:leading-6" required />
                    </div>
                </div>
                {/* Company Name */}
                <div class="sm:col-span-2">
                    <label for="id_company_name" class="block text-lg font-bold font-nunito leading-6 text-black">Company Name<span class="text-xs text-red-500">*</span></label>
                    <div class="mt-2.5">
                        <input type="text" name="company_name" id="id_company_name" maxlength="100" placeholder="Enter your company name" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-800 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-[#1B4671] sm:text-sm sm:leading-6" required />
                    </div>
                </div>
                {/* Website URL */}
                <div class="sm:col-span-2">
                    <label for="id_url" class="block text-lg font-bold font-nunito leading-6 text-black">Website URL (optional)</label>
                    <div class="mt-2.5">
                        <input type="text" name="url" id="id_url" placeholder="e.g. yourcompany.com" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-800 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-[#1B4671] sm:text-sm sm:leading-6" />
                    </div>
                </div>
                {/* Message */}
                <div class="sm:col-span-2 relative">
                    <label for="id_message" class="block text-lg font-bold font-nunito leading-6 text-black">Message<span class="text-xs text-red-500">*</span></label>
                    <div class="mt-2.5">
                        <textarea name="message" cols="40" rows="6" placeholder="Type your message here" maxlength="600" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-800 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-[#1B4671] sm:text-sm sm:leading-6 resize-none" required id="id_message"></textarea>
                        <!-- Character Count Display -->
                        <div id="charCount" class="absolute bottom-3 right-3 text-xs text-gray-500">0/600</div>
                    </div>
                </div>
            </div>

            {/* Submit Button */}
            <div class="mt-8 flex justify-center max-w-none">
                <button type="submit" class="rounded-md border bg-[#B6CB23] w-full py-3 text-center text-base font-nunito text-[#1B4671] font-semibold shadow-sm hover:bg-opacity-90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#1B4671]">
                    Send message
                </button>
            </div>
            <!-- Form Status Message Area (REMOVED - Replaced by Modal) -->
            <!-- <div id="formStatus" class="mt-4 text-center"></div> -->
        </div>
    </form>
    {/* --- END FORM --- */}

    {/* --- MODAL --- */}
    <div id="statusModal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50 p-4 transition-opacity duration-300 ease-out">
        <div class="relative w-full max-w-md transform rounded-lg bg-white p-6 shadow-xl transition-all duration-300 ease-out scale-95 opacity-0" id="modalDialog"> {/* Added ID and transition classes */}
            {/* Close Button */}
            <button id="closeModalBtn" type="button" class="absolute top-3 right-3 text-gray-400 hover:text-gray-600">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span class="sr-only">Close modal</span>
            </button>

            {/* Modal Content */}
            <h3 id="modalTitle" class="text-lg font-medium leading-6 text-gray-900">Message Status</h3>
            <div class="mt-2">
                <p id="modalMessage" class="text-sm text-gray-600">
                    {/* Message will be inserted here */}
                </p>
            </div>

            {/* OK Button */}
            <div class="mt-4 text-right"> {/* Aligned button to the right */}
                 <button id="modalOkBtn" type="button" class="inline-flex justify-center rounded-md border border-transparent bg-[#1B4671] px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-opacity-90 focus:outline-none focus-visible:ring-2 focus-visible:ring-[#B6CB23] focus-visible:ring-offset-2">
                    OK
                </button>
            </div>
        </div>
    </div>
    {/* --- END MODAL --- */}


    <script>
        import { sendFormData } from '../lib/firebase'; // Ensure path is correct

        document.addEventListener("DOMContentLoaded", () => {
            const form = document.getElementById("contactForm");
            const messageBox = document.getElementById("id_message");
            const charCount = document.getElementById("charCount");
            // REMOVED: const formStatus = document.getElementById("formStatus");
            const submitButton = form.querySelector("button[type='submit']");

            // Modal elements
            const statusModal = document.getElementById("statusModal");
            const modalDialog = document.getElementById("modalDialog"); // Get the inner dialog for transitions
            const modalMessage = document.getElementById("modalMessage");
            const closeModalBtn = document.getElementById("closeModalBtn");
            const modalOkBtn = document.getElementById("modalOkBtn");

            // Function to show the modal
            function showModal(message, type = "info") { // type can be 'success', 'error', 'info'
                modalMessage.textContent = message;
                // Adjust styling based on type
                if (type === 'success') {
                    modalMessage.className = 'text-sm text-green-600'; // Use Tailwind success color
                } else if (type === 'error') {
                    modalMessage.className = 'text-sm text-red-600'; // Use Tailwind error color
                } else {
                    modalMessage.className = 'text-sm text-gray-600'; // Default color
                }

                statusModal.classList.remove('hidden');
                statusModal.classList.add('flex'); // Use flex to center
                // Trigger transition classes after a tiny delay for effect
                requestAnimationFrame(() => {
                    statusModal.classList.add('opacity-100');
                    modalDialog.classList.add('scale-100', 'opacity-100');
                    modalDialog.classList.remove('scale-95', 'opacity-0');
                });
            }

            // Function to hide the modal
            function hideModal() {
                statusModal.classList.remove('opacity-100');
                modalDialog.classList.remove('scale-100', 'opacity-100');
                modalDialog.classList.add('scale-95', 'opacity-0');

                // Wait for transition to finish before hiding completely
                setTimeout(() => {
                    statusModal.classList.add('hidden');
                    statusModal.classList.remove('flex');
                }, 300); // Match transition duration
            }

            // Event listeners for closing the modal
            closeModalBtn.addEventListener("click", hideModal);
            modalOkBtn.addEventListener("click", hideModal);
            // Optional: Close modal if clicking outside the dialog
            statusModal.addEventListener("click", (event) => {
                if (event.target === statusModal) { // Check if the click was directly on the overlay
                    hideModal();
                }
            });


            // Update character count on input
            if (messageBox && charCount) {
                messageBox.addEventListener("input", () => {
                    charCount.textContent = `${messageBox.value.length}/600`;
                });
                 charCount.textContent = `${messageBox.value.length}/600`; // Initialize count
            }

            if (form) {
                form.addEventListener("submit", async (event) => {
                    event.preventDefault();
                    submitButton.disabled = true;
                    submitButton.textContent = 'Sending...';

                    // No longer need serverEndpoint check

                    const formData = new FormData(form);
                    const data = {
                        full_name: formData.get("full_name")?.trim(),
                        title: formData.get("title")?.trim(),
                        email: formData.get("email")?.trim(),
                        company_name: formData.get("company_name")?.trim(),
                        url: formData.get("url")?.trim(),
                        message: formData.get("message")?.trim(),
                        submittedAt: new Date().toISOString(),
                    };

                    // Basic validation check remains the same...
                    if (!data.full_name || !data.title || !data.email || !data.company_name || !data.message) {
                        showModal("Please fill in all required fields.", "error");
                        submitButton.disabled = false;
                        submitButton.textContent = 'Send message';
                        return;
                    }

                    // Simplified try/catch/finally
                    try {
                        // --- Send to Firebase (which now also triggers email) ---
                        console.log("Saving data and triggering email via Firebase:", data);
                        await sendFormData(data); // This now handles both Firestore writes
                        console.log("Data saved and email trigger initiated.");

                        // --- Handle Success ---
                        showModal("Message sent successfully!", "success");
                        form.reset();
                        if (messageBox && charCount) {
                           charCount.textContent = `0/600`; // Reset char count
                        }

                    } catch (error) {
                        // --- Handle Error (from batch commit) ---
                        console.error("Error processing form submission:", error);
                        showModal("Failed to send message. Please try again later.", "error");

                    } finally {
                        // --- Re-enable button ---
                        submitButton.disabled = false;
                        submitButton.textContent = 'Send message';
                    }
                });
            } else {
                console.error("Contact form not found");
            }
        });
      </script>
</Layout>